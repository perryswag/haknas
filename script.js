
//H칛mta delar fr친n html
const section = document.querySelector('section');
const playerLivesCount = document.querySelector("span");
// Deklarera let ist칛llet f칬r count p친 playerLives f칬r att kunna 칛ndra objektet
let playerLives =  0;

//Inneh친llet i texten ska uppdateras i takt med vad som h칛nder i memoryt
playerLivesCount.textContent = playerLives;

//Data med alla bilder som ska va med i memoryt
const getData = () => [

    { imgSrc: "./imagesM/hastm1.png", name:"nr1" },
    { imgSrc: "./imagesM/hastm2.png", name:"nr2" },
    { imgSrc: "./imagesM/hastm3.png", name:"nr3" },
    { imgSrc: "./imagesM/hastm4.png", name:"nr4" },
    { imgSrc: "./imagesM/hastm5.png", name:"nr5" },
    { imgSrc: "./imagesM/hastm6.png", name:"nr6" },
    { imgSrc: "./imagesM/hastm7.png", name:"nr7" },
    { imgSrc: "./imagesM/hastm1.png", name:"nr1" },
    { imgSrc: "./imagesM/hastm2.png", name:"nr2" },
    { imgSrc: "./imagesM/hastm3.png", name:"nr3" },
    { imgSrc: "./imagesM/hastm4.png", name:"nr4" },
    { imgSrc: "./imagesM/hastm5.png", name:"nr5" },
    { imgSrc: "./imagesM/hastm6.png", name:"nr6" },
    { imgSrc: "./imagesM/hastm7.png", name:"nr7" },
    { imgSrc: "./imagesM/tjader1.png", name:"tjader" },
    { imgSrc: "./imagesM/tjader2.png", name:"tjader" },

];

//Deklarering av funktion randomoize
//som ger objekten i cardData ett random nummer 

// Varf칬r -0.5 h칛r egentligen , testa utan
const randomize = () => {  
    const cardData = getData();    
    cardData.sort(() => Math.random() - 0.5);
    return cardData;    
};

// CardGenerator genererar slumpat memory genom att k칬ra randomize
const cardGenerator = () => {
    const cardData = randomize();

    // Generate the HTML
    //F칬r varje objekt i cardData, g칬r ett kort, en framsida och en baksida
    cardData.forEach((item) => {
        const card = document.createElement("div");
        const face = document.createElement("img");
        const back = document.createElement("div");
        card.classList = "card";
        face.classList = "face";
        back.classList = "back";

        //Attach info till varje kort
        //Facet ska vara en bild, kortet ska ha bildnamnet som attribut
        face.src = item.imgSrc;
        card.setAttribute('name', item.name);

        //Attach kortet i sektionsdelen av koden
        section.appendChild(card);
        card.appendChild(face);
        card.appendChild(back);

        //N칛r anv칛ndaren klickar p친 ett kort, kommer funktionen? (e) genomf칬ras
        //toggleCard kommer adderas till varje objekt n칛r ett kort klickas
        card.addEventListener("click", (e) => {
            card.classList.toggle("toggleCard");
            checkCards(e);
        });
    });
};

//Kolla p친 kortet vi klickar p친
//Varje g친ng vi flippar ett kort adderar vi flipped till objektet
//Vi samlar alla objekt som har klasserna flipped och toggelCard i varsina nodeLists
const checkCards = (e) => {
    const clickedCards = e.target;
    clickedCards.classList.add("flipped");
    const flippedCards = document.querySelectorAll(".flipped");
    const toggleCard = document.querySelectorAll(".toggleCard");

    
    //Om det f칬rsta v칛nda kortet 칛r en tj칛der, b칬rja om!!
    if(flippedCards.length === 1) {
        if (flippedCards[0].getAttribute("name") === "tjader") {        
            console.log("tj칛derattack kort1!!!"); 
            
              setTimeout(() => restart(
                "TJ츿DERATTACK!!!!!! 游뚿游뚿游뚿游뚿游뚿 Aj aj aj, nu kom 游붂tj칛dern游붂 och tog dig. Bara att b칬rja om.")
                , 2000);

                flippedCards.forEach(card => {
                    card.classList.remove("flipped");
                  });

            playerLives = 0;
            playerLivesCount.textContent = playerLives;
        };
    
    }
    
    //Om det finns tv친 flippade kort och det f칬rsta namnet 칛r samma 
    //som det andra namnet, dvs det 칛r samma kort f친r vi en match.
    //F칬r varje flippat kort tar vi d친 bort flipped och g칬r korten 
    //oklickbara, dvs det g친r inte att g칬ra n친got med dom utan dom stannar uppv칛nda
    if(flippedCards.length === 2) {

        //Om det andra v칛nda kortet 칛r en tj칛der, b칬rja om!!

        // if (flippedCards[0].getAttribute("name") === "tjader") {
        //     console.log("tj칛derattack kort2!!!"); 
            
        //     flippedCards.forEach(card => {
        //         card.classList.remove("flipped");
        //       });

        //     setTimeout(() => restart(
        //         "TJ츿DERATTACK!! 游뚿游뚿游뚿游뚿游뚿 Nu rymde alla h칛starna, du f친r leta r칛tt p친 dom igen.")
        //         , 2000);

        //     playerLives = 0;
        //     playerLivesCount.textContent = playerLives;
        // };

        //g칬ra en for-loop ist칛llet ? som itererar typ

        if ((flippedCards[1].getAttribute("name") === "tjader") ||
        (flippedCards[0].getAttribute("name") === "tjader")) {
            console.log("tj칛derattack kort2!!!"); 
            
            flippedCards.forEach(card => {
                card.classList.remove("flipped");
              });

            setTimeout(() => restart(
                "TJ츿DERATTACK!! 游뚿游뚿游뚿游뚿游뚿 Nu rymde alla h칛starna, du f친r leta r칛tt p친 dom igen.")
                , 2000);

            playerLives = 0;
            playerLivesCount.textContent = playerLives;
        };  
        
        if (flippedCards[0].getAttribute("name") === flippedCards[1].getAttribute("name")) {
            console.log("r칛tt ihopparat!");  
            playerLives++;
            playerLivesCount.textContent = playerLives;
            flippedCards.forEach(card => {
                card.classList.remove("flipped");
                card.style.pointerEvents = "none";
          });
        } 

        
        //Annars 칛r det inte r칛tt. Vi tar bort flipped samt toggleCard s친 att
        //kortet inte visas l칛ngre. Vi togglar tillbaka till hide helt enkelt.
        //Timern best칛mmer n칛r kortet ska bli hidden igen
        else {
            console.log("ingen match");
            flippedCards.forEach((card) => {
                card.classList.remove("flipped");
                setTimeout(() => card.classList.remove("toggleCard"), 1000);
            });
        }
    }

    //Om l칛ngden p친 toggleCard 칛r 14 s친 칛r memoryt klarat!
    if(toggleCard.length === 14) {
        //l칛gg in h칛r s친 att allt visas och att det finns n친gon knapp med b칬rja om? eller inte 
        // du beh칬ver inte ta vatten 칬ver huvudet
        // l칛gg in h칛r s친 det 친terst칛lls osv!
        setTimeout(() => restart(
            "!! Du klarade det!! Bra jobbat, nu kan du andas ut inga tj칛drar kan ta dig nu."
              ), 2000);
    }

};

//Restart av memoryt
// Ta bort all info vi har sen innan och reseta hela br칛det!
// V칛nd alla kort tillbaka och g칬r ett nytt random br칛de
const restart = (text) => {
    let cardData = randomize();
    let faces = document.querySelectorAll(".face");
    let cards = document.querySelectorAll(".card");
    //Inget g친r att klicka p친 f칬rens 친terst칛llningen 칛r gjord
    section.style.pointerEvents = "none";
    cardData.forEach((item,index) => {
        cards[index].classList.remove("toggleCard");
        //Randomize p친 nytt
        setTimeout(() => {
        //G칬r s친 att de klickade korten g친r att klicka p친 p친 nytt efter omtstart
            cards[index].style.pointerEvents = "all";
            //Ge alla kort en ny bild
            faces[index].src = item.imgSrc;
            // Uppdatera namnet p친 objekten ocks친
            cards[index].setAttribute('name', item.name);
            // 칀terst칛llningen 칛r gjord, nu kan vi klicka p친 grejer igen
            section.style.pointerEvents = "all";
        }, 1000) // F칬rdr칬j lite s친 att korten hinner v칛nda tillbaka innan de byts
    });
    
    setTimeout(() => window.alert(text), 1000);

};



//K칬r igen! Samma villkor allting
cardGenerator();